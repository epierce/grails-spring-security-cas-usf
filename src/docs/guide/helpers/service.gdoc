h4. getUsername()
Retrieves the username passed during authentication (NetID)

Example:

{code}
class SomeController {
   def usfCasService

   def someAction = {
      def user = usfCasService.username
      ...
   }
}
{code}

h4. getEppa()
Retrieves the EduPersonPrimaryAffiliation for the currently logged in user

Example:

{code}
class SomeController {
   def usfCasService

   def someAction = {
      def primaryAffil = usfCasService.eppa
      ...
   }
}
{code}

h4. getAttributes()
Retrieves a map of the attributes passed by CAS for the currently logged in user

Example:

{code}
class SomeController {
   def usfCasService

   def someAction = {
      def attrMap = usfCasService.attributes

      def commonName = attributes.CommonName
      ...
   }
}
{code}

{note}
@edu.usf.cims.UsfCasService@ inherits from @grails.plugins.springsecurity.SpringSecurityService@, so the rest of this
document was copied from spring-security-core's docs
{note}
@edu.usf.cims.UsfCasService@ provides security utility functions. It is a regular Grails service, so you use dependency injection to inject it into a controller, service, taglib, and so on:

{code}
def usfCasService
{code}

h4. getCurrentUser()
Retrieves a domain class instance for the currently authenticated user. During authentication a user/person domain class instance is loaded to get the user's password, roles, etc. and the id of the instance is saved. This method uses the id and the domain class to re-load the instance.

Example:

{code}
class SomeController {

   def usfCasService

   def someAction = {
      def user = usfCasService.currentUser
      ...
   }
}
{code}

h4. isLoggedIn()
Checks whether there is a currently logged-in user.

Example:

{code}
class SomeController {

   def usfCasService

   def someAction = {
      if (usfCasService.isLoggedIn()) {
         ...
      }
      else {
         ...
      }
   }
}
{code}

h4. getAuthentication()

Retrieves the current user's [Authentication|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/Authentication.html]. If authenticated in, this will typically be a [UsernamePasswordAuthenticationToken|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/UsernamePasswordAuthenticationToken.html].

If not authenticated and the [AnonymousAuthenticationFilter|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/authentication/AnonymousAuthenticationFilter.html] is active (true by default) then the anonymous user's authentication will be returned ([AnonymousAuthenticationToken|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/AnonymousAuthenticationToken.html] with username 'anonymousUser' unless overridden).


Example:

{code}
class SomeController {

   def usfCasService

   def someAction = {
      def auth = usfCasService.authentication
      String username = auth.username
      def authorities = auth.authorities // a Collection of GrantedAuthority
      boolean authenticated = auth.authenticated
      ...
   }
}
{code}

h4. getPrincipal()

Retrieves the currently logged in user's @Principal@. If authenticated, the principal will be a @org.codehaus.groovy.grails.plugins.springsecurity.GrailsUser@, unless you  have created a custom @UserDetailsService@, in which case it will be whatever implementation of [UserDetails|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UserDetails.html] you use there.

If not authenticated and the [AnonymousAuthenticationFilter|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/authentication/AnonymousAuthenticationFilter.html] is active (true by default) then the anonymous user's name will be returned ('anonymousUser' unless overridden).

Example:

{code}
class SomeController {

   def usfCasService

   def someAction = {
      def principal = usfCasService.principal
      String username = principal.username
      def authorities = principal.authorities // a Collection of GrantedAuthority
      boolean enabled = principal.enabled
      ...
   }
}
{code}


h4. updateRole()
Updates a role and, if you use @Requestmap@ instances to secure URLs, updates the role name in all affected @Requestmap@ definitions if the name was changed.

Example:

{code}
class RoleController {

   def usfCasService

   def update = {
      def roleInstance = Role.get(params.id)
      if (!usfCasService.updateRole(roleInstance, params)) {
         render view: 'edit', model: [roleInstance: roleInstance]
         return
      }

      flash.message = "The role was updated"
      redirect action: show, id: roleInstance.id
   }
}
{code}

h4. deleteRole()
Deletes a role and, if you use @Requestmap@ instances to secure URLs, removes the role from all affected @Requestmap@ definitions. If a @Requestmap@'s config attribute is only the role name (for example, "/foo/bar/\*\*=ROLE_FOO"), it is deleted.

Example:

{code}
class RoleController {

   def usfCasService

   def delete = {
      def roleInstance = Role.get(params.id)
      try {
         usfCasService.deleteRole (roleInstance
         flash.message = "The role was deleted"
         redirect action: list
      }
      catch (DataIntegrityViolationException e) {
         flash.message = "Unable to delete the role"
         redirect action: show, id: params.id
      }
   }
}
{code}

h4. clearCachedRequestmaps()
Flushes the Requestmaps cache and triggers a complete reload. If you use @Requestmap@ instances to secure URLs, the plugin loads and caches all @Requestmap@ instances as a performance optimization. This action saves database activity because the requestmaps are checked for each request. Do not allow the cache to become stale. When you create, edit or delete a @Requestmap@, flush the cache. Both @updateRole()@ and @deleteRole()@ call clearCachedRequestmaps()for you. Call this method when you create a new @Requestmap@ or do other @Requestmap@ work that affects the cache.

Example:

{code}
class RequestmapController {

   def usfCasService

   def save = {
      def requestmapInstance = new Requestmap(params)
      if (!requestmapInstance.save(flush: true)) {
         render view: 'create', model: [requestmapInstance: requestmapInstance]
         return
      }

      usfCasService.clearCachedRequestmaps()
      flash.message = "Requestmap created"
      redirect action: show, id: requestmapInstance.id
   }
}
{code}

h4. reauthenticate()
Rebuilds an [Authentication|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/Authentication.html] for the given username and registers it in the security context. You typically use this method after updating a user's authorities or other data that is cached in the @Authentication@ or @Principal@. It also removes the user from the user cache to force a refresh at next login.

Example:

{code}
class UserController {

   def usfCasService

   def update = {
      def userInstance = User.get(params.id)

      params.salt = person.salt
      if (params.password) {
         params.password = usfCasService.encodePassword(params.password, salt)
         def salt = ... // e.g. randomly generated using some utility method
         params.salt = salt
      }
      userInstance.properties = params
      if (!userInstance.save(flush: true)) {
         render view: 'edit', model: [userInstance: userInstance]
         return
      }

      if (usfCasService.loggedIn &&
             usfCasService.principal.username == userInstance.username) {
         usfCasService.reauthenticate userInstance.username
      }

      flash.message = "The user was updated"
      redirect action: show, id: userInstance.id
   }
}
{code}